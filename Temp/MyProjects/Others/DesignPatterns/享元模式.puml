@startuml

interface Flyweight {
    + operation(extrinsicState)
}

class ConcreteFlyweight {
    - intrinsicState
    + operation(extrinsicState)
}

class UnsharedConcreteFlyweight {
    + operation(extrinsicState)
}

class FlyweightFactory {
    + getFlyweight(key) : Flyweight
}

class Client {
}

ConcreteFlyweight ..|> Flyweight
UnsharedConcreteFlyweight ..|> Flyweight
Flyweight "-flyweights" --o FlyweightFactory
Client ..> FlyweightFactory : <<use>>
Client ..> ConcreteFlyweight : <<use>>
Client ..> UnsharedConcreteFlyweight : <<use>>

note left of FlyweightFactory::"getFlyweight(key)"
    if (getFlyweight(key) is exists) {
        return existing flyweight;
    } else {
        create new flyweight;
        add it to the pool of flyweights;
        return the new flyweight;
    }
end note

note left of Client
    存储并管理所有对象的 extrinsicStates。
    用 `FlyweightFactory.getFlyweight(key).operation(extrinsicState)` 就可修改 extrinsicState。
end note

@enduml
