@startuml

interface Observer {
    + update()
}

class ConcreteObserver {
    - subject : Subject
    - observerState : State
    + update()
}

abstract class Subject {
    - observers : Observer
    + attach(observer : Observer)
    + detach(observer : Observer)
    + notify()
}

class ConcreteSubject {
    - subjectState : State
    + getState()
    + setState()
}

ConcreteObserver ..|> Observer
ConcreteSubject --|> Subject
Observer "-observers" --o Subject
Subject "-subject" --o ConcreteObserver

note left of ConcreteObserver::"update()"
    observerState = subject.getState()
end note

note left of Subject::"notify()"
    for all o in observers {
        o.update()
    }
end note

@enduml
