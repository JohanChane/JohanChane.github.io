@startuml

interface Visitor {
    + visitConcreteElement1(concreteElement1 : ConcreteElement1)
    + visitConcreteElement2(concreteElement2 : ConcreteElement2)
}

class ConcreteVisitor1 {
    + visitConcreteElement1(concreteElement1 : ConcreteElement1)
    + visitConcreteElement2(concreteElement2 : ConcreteElement2)
}

class ConcreteVisitor2 {
    + visitConcreteElement1(concreteElement1 : ConcreteElement1)
    + visitConcreteElement2(concreteElement2 : ConcreteElement2)
}

interface Element {
    + accept(visitor : Visitor)
}

class ConcreteElement1 {
    + accept(visitor : Visitor)
    + operationA()
}

class ConcreteElement2 {
    + accept(visitor : Visitor)
    + operationB()
}

class ObjectStructure {
    - collection
}

class Client {
    - objectStructure : ObjectStructure
    - visitor1 : ConcreteVisitor1
    - visitor2 : ConcreteVisitor2
    + visitor1Walk()
    + visitor2Walk()
}

ConcreteElement1 ..|> Element
ConcreteElement2 ..|> Element
ConcreteVisitor1 ..|> Visitor
ConcreteVisitor2 ..|> Visitor
Element "-collection" --o ObjectStructure
Client ..> Visitor : <<use>>
Client ..> ObjectStructure : <<use>>

note left of ObjectStructure::"collection"
    元素的集合，能枚举集合内的元素。
end note

note left of ConcreteElement1::"accept(visitor : Visitor)"
    visitor.visitConcreteElement1(this)
end note

note left of ConcreteElement2::"accept(visitor : Visitor)"
    visitor.visitConcreteElement2(this)
end note

note left of Client::"visitor1Walk()"
    // 将操作（visitor）作用于 objectStructure 的所有元素
    for (Element element : objectStructure) {
        element.accept(visitor1)
    }
end note

@enduml
